# -*- coding: utf-8 -*-
"""DAP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kbg7xVMSxPJ9oaju1bNVrDwlTODDmFuy
"""

#Creating Arrays
import numpy as np
arr=np.array([1,2,3,4,5])
print(arr)
zeros_arr=np.zeros(((3,3)),dtype=int)
print(zeros_arr)
arrange_arr=np.arange(10)
print(arrange_arr)

#Array manipulation
reshape_arr=arr.reshape(5,1)
print(reshape_arr)
sliced_arr=arr[2:4]
print(sliced_arr)

#Splitting of Array
arr=np.array([1,2,3,4])
arr1=np.split(arr,2)
print(arr1)

#Vstack
arr1=np.array([1,2,3])
arr2=np.array([4,5,6])
arr3=np.vstack(arr1+arr2)
print(arr3)
#Stack
arr1=np.array([1,2,3])
arr2=np.array([4,5,6])
arr3=np.stack(arr1+arr2)
print(arr3)

#Addition of Arrays
m1=np.array([[1,2,3],[2,3,4]])
m2=np.array([[3,7,4],[2,5,1]])
result=m1+m2
r2=m1+3
print(result)
print(r2)

#Transposing
a=np.array([[1,2,3,4],[5,6,7,8]])
b=a.T
print(b)

#Linear Algebra
arr=np.array([[1,2],[3,4]])
arr2=np.array([[5,6],[7,8]])
d=np.linalg.eig(arr)
print(d)

#Dot product
r=np.dot(arr,arr2)
print(r)

#Sum of Array
e1=np.array([[1,2,3],[4,5,6]])
e3=np.sum(e1,axis=0)
e2=np.sum(e1,axis=1)
print(e2)
print(e3)

#Statistical operaions
a=np.array([1,2,3,4,5])
Mean=np.mean(a)
med=np.median(a)
vari=np.var(a)
SD=np.std(a)
print(Mean)
print(med)
print(vari)
print(SD)

#Mathplot library
import matplotlib.pyplot as plt
#Graph plot
a=np.array([1,2])
plt.plot(a)

#pandas
import pandas as pd
a=["durga","ramya","sunny","dhanush"]
r=pd.Series(a, index = [89,34,45,23])
print(r)
#pandas using csv
a=pd.read_csv("/content/csv.zip")
print(a)
b=pd.read_csv("/content/test.csv")
print(b)
c=pd.read_csv("/content/tested.csv")
print(c)
#printing one row as series
print(a.loc[5])

#mv =b['Pclass'].mean()
#b=b.fillna(mv)
#print(b)

b=b.drop_duplicates()
print(b)

#display contant
a.head()
c.tail()

a.shape

#taking last 10 values for manual testing

manual_testing1=a.tail(10)
#for i in range(last no.,last to 10  ,-1)
#a.drop([i],axis=0,inplace=True)
manual_testing2=a.head(10)
manual_testing=pd.concat([manual_testing1,manual_testing2],axis=0)
manual_testing.to_csv("manual_testing.csv")

#than dispaly

#display using two fuction .groupby & .count
print(manual_testing.groupby(['PassengerId'])['Survived'].count())

a=[230,560,780,127,128]
b=[200,160,270,127,400]
y=[1,2,3,4]
p1=[(a[i]-a[i-1]) for i in range(1,len(a))]
p2=[(b[i]-b[i-1]) for i in range(1,len(b))]
plt.subplot(2,1,1)
plt.plot(y,p1,color='blue',linewidth='2',label='companyA',marker='<',ms='15',mec='k')
plt.legend(loc='best')
plt.subplot(2,1,2)
plt.plot(y,p2,color='black',linestyle='dotted',label='companyB',marker='x')
plt.legend(loc='best')
plt.show()

#pie chat
a=np.array([25,60,5,10])
l=["AIML","Python","pandas","numpy"]
c= ['yellow','blue','red','black']
plt.pie(a,labels=l)
explo = [0.2,0,0.2,0]
plt.pie(a,labels=l,explode=explo, textprops={'fontsize':14},startangle=180,colors=c)
plt.show()

#Task1
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df=pd.read_csv('/content/city_temperature.csv')
at=np.mean(df['AvgTemperature'])
ht=np.max(df['AvgTemperature'])
lt=np.min(df['AvgTemperature'])
threshold=60
thresholds= np.sum(df['AvgTemperature'] > threshold)
print(f'Average Temperature: {at:.2f}°C')
print(f'Highest Temperature: {ht}°C')
print(f'Lowest Temperature: {lt}°C')
print(f'Days Exceeding {threshold}°C: {thresholds}')
plt.plot(df['Day'], df['AvgTemperature'])
plt.xlabel('Day')
plt.ylabel('AvgTemperature (°C)')
plt.title('Daily Temperatures')
plt.show()

#4th laber
#!pip install seaborn
#tips are it is a dataset builtin ex:titanic,mpg,planets,diamonds......etc.
import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("tips")
print(tips)
sns.scatterplot(x="total_bill", y="tip", data=tips)
plt.title("scatter plot total bill vs. tip")
plt.xlabel("total bill($)")
plt.ylabel("tip ($)")
plt.show()

#violinplot
import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("diamonds")
print(tips)
sns.violinplot(x="carat", y="cut", data=tips)
plt.title("scatter plot total bill vs. tip")
plt.xlabel("carat")
plt.ylabel("cut")
plt.show()

#heatmap(correlation_martix)
import seaborn as sns
import matplotlib.pyplot as plt
iris=sns.load_dataset("iris")
print(iris)
correlation_matrix=iris.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("coorelation heatmap of iris dataset")
plt.show()

iris=sns.load_dataset("mpg")
print(iris)
correlation_matrix=iris.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("coorelation heatmap of iris dataset")
plt.show()

